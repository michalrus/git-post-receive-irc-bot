#!/bin/sh

#
# Copyright (c) 2014 Michal Rus
# Based on `contrib/post-receive-email` copyright (c) 2007 Andy Parkins
#
# Outputs to stdout, most probably you'll want to pipe it to `suckless/ii`.
#

# IRC colors (same as GitHub's)

xA=$(/bin/echo -e '\x0313')
xB=$(/bin/echo -e '\x0315')
xC=$(/bin/echo -e '\x0306')
xD=$(/bin/echo -e '\x02')
xE=$(/bin/echo -e '\x0314')
xF=$(/bin/echo -e '\x0304')
xR=$(/bin/echo -e '\x0f')

prep_for_email()
{
	# --- Arguments
	oldrev=$(git rev-parse $1)
	newrev=$(git rev-parse $2)
	refname="$3"

	# --- Interpret
	# 0000->1234 (create)
	# 1234->2345 (update)
	# 2345->0000 (delete)
	if expr "$oldrev" : '0*$' >/dev/null
	then
		change_type="create"
	else
		if expr "$newrev" : '0*$' >/dev/null
		then
			change_type="delete"
		else
			change_type="update"
		fi
	fi

	# --- Get the revision types
	newrev_type=$(git cat-file -t $newrev 2> /dev/null)
	oldrev_type=$(git cat-file -t "$oldrev" 2> /dev/null)
	case "$change_type" in
	create|update)
		rev="$newrev"
		rev_type="$newrev_type"
		;;
	delete)
		rev="$oldrev"
		rev_type="$oldrev_type"
		;;
	esac

	# The revision type tells us what type the commit is, combined with
	# the location of the ref we can decide between
	#  - working branch
	#  - tracking branch
	#  - unannoted tag
	#  - annotated tag
	case "$refname","$rev_type" in
		refs/tags/*,commit)
			# un-annotated tag
			refname_type="tag"
			short_refname=${refname##refs/tags/}
			;;
		refs/tags/*,tag)
			# annotated tag
			refname_type="annotated tag"
			short_refname=${refname##refs/tags/}
			# change recipients
			if [ -n "$announcerecipients" ]; then
				recipients="$announcerecipients"
			fi
			;;
		refs/heads/*,commit)
			# branch
			refname_type="branch"
			short_refname=${refname##refs/heads/}
			;;
		refs/remotes/*,commit)
			# tracking branch
			refname_type="tracking branch"
			short_refname=${refname##refs/remotes/}
			echo >&2 "*** Push-update of tracking branch, $refname"
			echo >&2 "***  - no email generated."
			return 1
			;;
		*)
			# Anything else (is there anything else?)
			echo >&2 "*** Unknown type of update to $refname ($rev_type)"
			echo >&2 "***  - no email generated"
			return 1
			;;
	esac

	return 0
}

generate_email()
{
	# Call the correct body generation function
	local fn_name
	fn_name=general
	case "$refname_type" in
	"tracking branch"|branch)
		fn_name=branch
		;;
	"annotated tag")
		fn_name=general
		;;
	esac

	prep_for_show_new_revs
	generate_${change_type}_${fn_name}_email
}

# --------------- Branches

generate_create_branch_email()
{
	show_new_revisions "[$xA$GL_REPO$xR] $xB$GL_USER$xR created $xC$short_refname$xR from $xC$(rev2ref $new_revs_parent)$xR (+${xD}$new_revs_count$xR new $s_commits)"
}

generate_update_branch_email()
{
	local fast_forward
	fast_forward=""
	[ -z "$(git rev-list $newrev..$oldrev)" ] && fast_forward=1

	if [ "$fast_forward" ]; then
		show_new_revisions "[$xA$GL_REPO$xR] $xB$GL_USER$xR pushed ${xD}$new_revs_count$xR new $s_commits to $xC$short_refname$xR"
	else
		show_new_revisions "[$xA$GL_REPO$xR] $xB$GL_USER$xR ${xF}force-pushed$xR $xC$short_refname$xR from $xE"$(shorten $oldrev)"$xR to $xE"$(shorten $newrev)"$xR (+${xD}$new_revs_count$xR new $s_commits)"
	fi
}

generate_delete_branch_email()
{
	echo "[$xA$GL_REPO$xR] $xB$GL_USER$xR ${xF}deleted$xR $xC$short_refname$xR at $xE"$(shorten $oldrev)"$xR"
}

# --------------- General references (most likely tags)

generate_create_general_email()
{
	show_new_revisions "[$xA$GL_REPO$xR] $xB$GL_USER$xR tagged $xC$short_refname$xR at $xE"$(shorten $newrev)"$xR"
}

generate_update_general_email()
{
	show_new_revisions "[$xA$GL_REPO$xR] $xB$GL_USER$xR ${xF}force-pushed$xR $xC$short_refname$xR from $xE"$(shorten $oldrev)"$xR to $xE"$(shorten $newrev)"$xR"
}

generate_delete_general_email()
{
	echo "[$xA$GL_REPO$xR] $xB$GL_USER$xR ${xF}deleted$xR $xC$short_refname$xR at $xE"$(shorten $oldrev)"$xR"
}

# --------------- Miscellaneous utilities

shorten() {
	git rev-parse --short "$1"
}

rev2ref() {
	local first_symbol
	first_symbol=$(git for-each-ref --format="%(refname:short) %(objectname)" 'refs/heads/' | grep "$1" | grep -v "^$short_refname " | cut -d " " -f 1 | head -n 1)

	if [ -n "$first_symbol" ] ; then
		echo "$first_symbol"
	else
		shorten "$1"
	fi
}

prep_for_show_new_revs()
{
	local revspec

	# This finds all log entries that are not already covered by
	# another ref - i.e. commits that are now accessible from this
	# ref that were previously not accessible

	# Revision range passed to rev-list differs for new vs. updated
	# branches.
	if [ "$change_type" = create ] ; then
		# Show all revisions exclusive to this (new) branch.
		revspec=$newrev
	elif [ "$change_type" = delete ] ; then
		return
	else
		# Branch update; show revisions not part of $oldrev.
		revspec=$oldrev..$newrev
	fi

	new_revs_list_file=$(mktemp)

	local other_branches
	other_branches=$(git for-each-ref --format='%(refname)' refs/heads/ | grep -F -v $refname)
	git rev-parse --not $other_branches | git rev-list --reverse --stdin $revspec >$new_revs_list_file

	new_revs_count=$(cat $new_revs_list_file | wc -l)

	s_commits="commits"
	[ $new_revs_count -eq 1 ] && s_commits="commit"

	if [ $new_revs_count -eq 0 ] ; then
		new_revs_parent=$newrev
	else
		new_revs_parent=$(git rev-parse $(cat $new_revs_list_file | head -n 1)^ 2>/dev/null) || \
			new_revs_parent=$oldrev # 0000000 if creating a completely new, parentless tree
	fi
}

show_new_revisions()
{
	echo "$1"$( [ $new_revs_count -gt 0 ] && echo ":" )
	cat $new_revs_list_file | while read onerev ; do
		git log -1 --format="$xA$GL_REPO$xR/$xC$short_refname$xR $xE%h$xR $xB%an$xR: %s" $onerev
	done
}

cleanup_show_new_revs()
{
	rm $new_revs_list_file
}

# ---------------------------- main()

# --- Config
# Set GIT_DIR either from the working directory, or from the environment
# variable.
GIT_DIR=$(git rev-parse --git-dir 2>/dev/null)
if [ -z "$GIT_DIR" ]; then
	echo >&2 "fatal: post-receive: GIT_DIR not set"
	exit 1
fi

# --- Main loop
# Allow dual mode: run from the command line just like the update hook, or
# if no arguments are given then run as a hook script
#
# Output to the terminal
if [ -n "$1" -a -n "$2" -a -n "$3" ]; then
	prep_for_email $2 $3 $1 && PAGER= generate_email
else
	while read oldrev newrev refname
	do
		prep_for_email $oldrev $newrev $refname || continue
		generate_email $maxlines
	done
fi
